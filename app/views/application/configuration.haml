- content_for :page_title, "Configuration"

= render 'shared/header'

%main.content-doc
  %h2 Configuration

  %p
    Doge uses an almost completely
    = link_to('unrestricted Rubocop configuration',
      "#{ENV['SOURCE_URL']}/blob/master/config/style_guides/ruby.yml")
    by default, unless you configure it to use your own style guide.

  %h3 Ruby

  %p
    To enable Ruby style checking, add the following to
    %em.code .hound.yml
    in the root of your project

    %code.code-block
      :preserve
        ruby:
          enabled: true

  %p
    Doge uses RuboCop internally so you can configure Doge by adding a
    = link_to('RuboCop config',
      "#{ENV['SOURCE_URL']}/blob/master/doc/default_rubocop.yml")
    to your project and adding the following to
    %em.code .hound.yml
    in the root of your project.

    %code.code-block
      :preserve
        ruby:
          enabled: true
          config_file: config/.rubocop.yml

  %h3 CoffeeScript

  %p
    The default doge configuration for CoffeeScript can be found
    = link_to('here',
      "#{ENV['SOURCE_URL']}/blob/master/config/style_guides/coffeescript.json")
    To enable CoffeeScript style checking, add the following to
    %em.code .hound.yml
    in the root of your project

    %code.code-block
      :preserve
        coffee_script:
          enabled: true

  %p
    Doge uses CoffeeLint internally so you can configure Doge by adding a
    = link_to('CoffeeLint config',
      "#{ENV['SOURCE_URL']}/blob/master/doc/coffeelint.json")
    to your project and adding the following to
    %em.code .hound.yml
    in the root of your project.

    %code.code-block
      :preserve
        coffee_script:
          enabled: true
          config_file: config/.coffeelint.json

  %h3 JavaScript

  %p
    To enable JavaScript style checking, add the following to
    %em.code .hound.yml
    in the root of your project

    %code.code-block
      :preserve
        java_script:
          enabled: true

  %p
    Doge uses JSHint internally so you can configure Doge by adding a
    = link_to('JSHint config',
      "#{ENV['SOURCE_URL']}/blob/master/doc/.jshintrc.json")
    to your project and adding the following to
    %em.code .hound.yml
    in the root of your project.

    %code.code-block
      :preserve
        java_script:
          enabled: true
          config_file: config/.jshint.json

  %p
    If you are looking to ignore certain JavaScript files from being checked for
    style issues you can set the
    %em.code ignore_file
    option in the
    %em.code .hound.yml
    in the root of your project. This option should be set to a file which
    defines what files or patterns should be ignored during style checking.

    %code.code-block
      :preserve
        java_script:
          enabled: true
          ignore_file: config/.javascript_ignore

  %p
    Each line in the
    %em.code .javascript_ignore
    file can specify a pattern for file names to ignore.

    %code.code-block
      :preserve
        vendor/assets/javascripts/**.js
